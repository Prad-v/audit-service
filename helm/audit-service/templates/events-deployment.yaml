{{- if .Values.events.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "audit-service.events.name" . }}
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "audit-service.events.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.events.replicas }}
  strategy:
    {{- toYaml .Values.events.strategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "audit-service.events.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "audit-service.events.selectorLabels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.events.ports.metrics | quote }}
        prometheus.io/path: "/metrics"
        {{- with .Values.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "audit-service.serviceAccountName" . }}
      {{- with .Values.security.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: events
        image: {{ include "audit-service.events.image" . }}
        imagePullPolicy: {{ .Values.events.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.events.ports.http }}
          protocol: TCP
        - name: metrics
          containerPort: {{ .Values.events.ports.metrics }}
          protocol: TCP
        {{- with .Values.security.containerSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        env:
        {{- range $key, $value := .Values.events.env }}
        {{- if ne $key "EVENTS_DATABASE_URL" }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- end }}
        
        # Database credentials from PostgreSQL secret
        {{- if .Values.database.postgresql.enabled }}
        - name: POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.credentials.secretName }}
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.credentials.secretName }}
              key: password
        - name: POSTGRES_DATABASE
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.credentials.secretName }}
              key: events_db_database
        # Construct the database URL directly from environment variables
        - name: EVENTS_DATABASE_URL
          value: "postgresql+asyncpg://audit_user:audit-password-123@audit-service-postgresql:5432/events_db"
        {{- else }}
        - name: EXTERNAL_POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.postgresql.external.passwordSecret.secretName }}
              key: {{ .Values.database.postgresql.external.passwordSecret.passwordKey }}
        {{- end }}
        
        # Application configuration
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          {{- toYaml .Values.events.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: varlog
          mountPath: /var/log
        {{- with .Values.events.volumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
      - name: tmp
        emptyDir: {}
      - name: varlog
        emptyDir: {}
      {{- with .Values.events.volumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
