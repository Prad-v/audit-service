{{- if .Values.backend.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "audit-service.backend.name" . }}
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "audit-service.backend.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.backend.replicas }}
  strategy:
    {{- toYaml .Values.backend.strategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "audit-service.backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "audit-service.backend.selectorLabels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.backend.ports.metrics | quote }}
        prometheus.io/path: "/metrics"
        {{- with .Values.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "audit-service.serviceAccountName" . }}
      {{- with .Values.security.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: backend
        image: {{ include "audit-service.backend.image" . }}
        imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.backend.ports.http }}
          protocol: TCP
        - name: metrics
          containerPort: {{ .Values.backend.ports.metrics }}
          protocol: TCP
        {{- with .Values.security.containerSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        env:
        {{- include "audit-service.backend.env" . | nindent 8 }}
        
        # Database credentials from PostgreSQL secret
        {{- if .Values.database.postgresql.enabled }}
        - name: POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.credentials.secretName }}
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.credentials.secretName }}
              key: password
        - name: POSTGRES_DATABASE
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.credentials.secretName }}
              key: database
        {{- else }}
        - name: EXTERNAL_POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.postgresql.external.passwordSecret.secretName }}
              key: {{ .Values.database.postgresql.external.passwordSecret.passwordKey }}
        {{- end }}
        
        # Application configuration
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: {{ include "audit-service.fullname" . }}-config
              key: DATABASE_URL
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "audit-service.secretName" . }}
              key: JWT_SECRET_KEY
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: {{ include "audit-service.fullname" . }}-config
              key: REDIS_URL
        - name: NATS_URL
          valueFrom:
            configMapKeyRef:
              name: {{ include "audit-service.fullname" . }}-config
              key: NATS_URL
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "/var/secrets/google/key.json"
        resources:
          {{- toYaml .Values.backend.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health/
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: google-credentials
          mountPath: /var/secrets/google
          readOnly: true
        {{- with .Values.backend.volumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
      - name: google-credentials
        secret:
          secretName: {{ include "audit-service.secretName" . }}
          items:
          - key: GOOGLE_CREDENTIALS
            path: key.json
      {{- with .Values.backend.volumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
