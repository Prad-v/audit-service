# Default values for audit-service
# This is a YAML-formatted file.

# Global configuration
global:
  environment: production
  imageRegistry: ""
  imagePullSecrets: []

# Database Configuration
# Users can choose between internal subcharts or external services
database:
  # PostgreSQL Configuration
  postgresql:
    # Enable/disable PostgreSQL subchart
    enabled: true
    
    # Internal PostgreSQL subchart configuration (when enabled: true)
    internal:
      # PostgreSQL subchart values
      postgresql:
        enabled: true
        auth:
          # These will be overridden by secrets in production
          postgresPassword: "postgres-password-123"
          database: "audit_logs"
          username: "audit_user"
          password: "audit-password-123"
        # Reference to Kubernetes secret for credentials
        credentials:
          secretName: "{{ .Values.database.postgresql.credentials.secretName }}"
          usernameKey: "username"
          passwordKey: "password"
          databaseKey: "database"
          postgresPasswordKey: "postgres-password"
        primary:
          persistence:
            enabled: true
            size: 10Gi
            storageClass: ""
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
        readReplicas:
          enabled: false
        metrics:
          enabled: true
          serviceMonitor:
            enabled: true
    
    # External PostgreSQL configuration (when enabled: false)
    external:
      host: "postgres-service"
      port: 5432
      database: "audit_logs"
      username: "audit_user"
      # Password should be provided via secret
      password: "{{ .Values.database.postgresql.external.passwordSecret.password }}"
      sslMode: "prefer"
      poolSize: 20
      maxOverflow: 30
      poolTimeout: 30
      poolRecycle: 3600
      # Secret reference for external PostgreSQL
      passwordSecret:
        secretName: "{{ .Values.database.postgresql.external.passwordSecret.secretName }}"
        passwordKey: "{{ .Values.database.postgresql.external.passwordSecret.passwordKey }}"
  
  # PostgreSQL Credentials Configuration
  credentials:
    # Default secret name for PostgreSQL credentials
    secretName: "postgresql-credentials"
    # Default database names
    databases:
      - name: "audit_logs"
        description: "Main audit logs database"
      - name: "alerting_db"
        description: "Alerting service database"
      - name: "events_db"
        description: "Events service database"
    # Default user configuration
    users:
      - username: "audit_user"
        description: "Main application user"
        databases: ["audit_logs", "alerting_db", "events_db"]
      - username: "readonly_user"
        description: "Read-only user for monitoring"
        databases: ["audit_logs"]
        readonly: true

  # NATS Configuration
  nats:
    # Enable/disable NATS subchart
    enabled: true
    
    # Internal NATS subchart configuration (when enabled: true)
    internal:
      # NATS subchart values
      nats:
        enabled: true
        jetstream:
          enabled: true
          memStorage:
            enabled: true
            size: 1Gi
          fileStorage:
            enabled: true
            size: 10Gi
            storageClass: ""
        cluster:
          enabled: false
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        metrics:
          enabled: true
          serviceMonitor:
            enabled: true
    
    # External NATS configuration (when enabled: false)
    external:
      host: "nats-service"
      port: 4222
      httpPort: 8222
      clusterPort: 6222
      jetstream:
        enabled: true
  
  # Redis Configuration (external only - no subchart)
  redis:
    enabled: false
    host: "redis-service"
    port: 6379
    database: 0
    password: ""
    ssl: false
    maxConnections: 20
    retryOnTimeout: true
    socketKeepalive: true
    socketKeepaliveOptions: "1,3,5"

# Image configuration
image:
  repository: audit-service
  tag: latest
  pullPolicy: Never
  frontend:
    repository: audit-service-frontend
    tag: latest
    pullPolicy: Never

# Application configuration
app:
  name: audit-service
  version: "1.0.0"
  replicas:
    backend: 3
    frontend: 2
    worker: 2
    alerting: 2
    events: 2

# Namespace configuration
namespace:
  create: false
  name: default
  annotations: {}
  labels:
    environment: development
    app.kubernetes.io/name: audit-service
    app.kubernetes.io/component: namespace

# Resource quotas and limits
resources:
  quota:
    enabled: true
    cpu:
      requests: "4"
      limits: "8"
    memory:
      requests: 8Gi
      limits: 16Gi
    storage:
      persistentvolumeclaims: "10"
      services: "10"
      secrets: "20"
      configmaps: "20"
  
  limits:
    enabled: true
    default:
      cpu: 500m
      memory: 512Mi
    defaultRequest:
      cpu: 100m
      memory: 128Mi

# Backend configuration
backend:
  enabled: true
  image:
    repository: audit-service-backend
    tag: latest
    pullPolicy: Never
  
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  
  ports:
    http: 8000
    metrics: 8001
  
  env:
    # Application Configuration
    ENVIRONMENT: "production"
    LOG_LEVEL: "INFO"
    API_V1_STR: "/api/v1"
    PROJECT_NAME: "Audit Service"
    
    # Database Configuration
    DATABASE_TYPE: "postgresql"
    DATABASE_POOL_SIZE: "20"
    DATABASE_MAX_OVERFLOW: "30"
    DATABASE_POOL_TIMEOUT: "30"
    DATABASE_POOL_RECYCLE: "3600"
    
    # BigQuery Configuration
    BIGQUERY_DATASET: "audit_logs"
    BIGQUERY_TABLE: "audit_events"
    BIGQUERY_LOCATION: "US"
    
    # Pub/Sub Configuration
    USE_PUBSUB: "true"
    PUBSUB_TOPIC_NAME: "audit-events"
    PUBSUB_SUBSCRIPTION_NAME: "audit-processor"
    PUBSUB_MAX_MESSAGES: "100"
    PUBSUB_ACK_DEADLINE: "60"
    PUBSUB_RETENTION: "604800"
    PUBSUB_ORDERING: "false"
    PUBSUB_EXACTLY_ONCE: "false"
    
    # Redis Configuration
    REDIS_HOST: "redis-service"
    REDIS_PORT: "6379"
    REDIS_DB: "0"
    REDIS_MAX_CONNECTIONS: "20"
    REDIS_RETRY_ON_TIMEOUT: "true"
    REDIS_SOCKET_KEEPALIVE: "true"
    REDIS_SOCKET_KEEPALIVE_OPTIONS: "1,3,5"
    
    # Cache Configuration
    CACHE_TTL: "300"
    CACHE_MAX_SIZE: "1000"
    CACHE_ENABLED: "true"
    
    # Security Configuration
    JWT_ALGORITHM: "HS256"
    JWT_ACCESS_TOKEN_EXPIRE_MINUTES: "30"
    JWT_REFRESH_TOKEN_EXPIRE_DAYS: "7"
    API_KEY_EXPIRE_DAYS: "365"
    
    # Rate Limiting
    RATE_LIMIT_ENABLED: "true"
    RATE_LIMIT_REQUESTS: "1000"
    RATE_LIMIT_WINDOW: "3600"
    
    # Monitoring Configuration
    METRICS_ENABLED: "true"
    METRICS_PORT: "8000"
    HEALTH_CHECK_INTERVAL: "30"
    
    # Worker Configuration
    WORKER_CONCURRENCY: "4"
    WORKER_MAX_RETRIES: "3"
    WORKER_RETRY_DELAY: "5"
    BATCH_SIZE: "100"
    BATCH_TIMEOUT: "5"
    
    # CORS Configuration
    CORS_ORIGINS: "https://backstage.example.com,https://audit.example.com"
    CORS_CREDENTIALS: "true"
    CORS_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
    CORS_HEADERS: "Content-Type,Authorization,X-Tenant-ID,X-Correlation-ID"

# Frontend configuration
frontend:
  enabled: true
  image:
    repository: audit-service-frontend
    tag: latest
    pullPolicy: Never
  
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  
  ports:
    http: 80
  
  env:
    NODE_ENV: "production"
    VITE_API_URL: "http://audit-service-backend:8000"

# Worker configuration
worker:
  enabled: true
  image:
    repository: audit-service-backend
    tag: latest
    pullPolicy: Never

# Alerting service configuration
alerting:
  enabled: true
  image:
    repository: audit-service-alerting
    tag: latest
    pullPolicy: Never
  
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  
  ports:
    http: 8001
    metrics: 8002
  
  env:
    # Application Configuration
    ENVIRONMENT: "production"
    LOG_LEVEL: "INFO"
    API_V1_STR: "/api/v1"
    PROJECT_NAME: "Alerting Service"
    
    # Database Configuration
    ALERTING_DATABASE_URL: "postgresql+asyncpg://audit_user:audit_password@postgres-service:5432/alerting_db"
    
    # Authentication Configuration
    ALERTING_API_KEY: "alerting-api-key-123"
    
    # Alerting Configuration
    ALERTING_MAX_ALERTS_PER_HOUR: "100"
    ALERTING_DEFAULT_THROTTLE_MINUTES: "5"
    ALERTING_RETRY_COUNT: "3"
    ALERTING_TIMEOUT_SECONDS: "30"
    
    # Provider Configuration
    ALERTING_PAGERDUTY_TIMEOUT: "30"
    ALERTING_SLACK_TIMEOUT: "30"
    ALERTING_WEBHOOK_TIMEOUT: "30"
    ALERTING_EMAIL_TIMEOUT: "30"
    
    # Monitoring Configuration
    METRICS_ENABLED: "true"
    METRICS_PORT: "8001"
    HEALTH_CHECK_INTERVAL: "30"
    
    # CORS Configuration
    CORS_ORIGINS: "https://backstage.example.com,https://audit.example.com"
    CORS_CREDENTIALS: "true"
    CORS_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
    CORS_HEADERS: "Content-Type,Authorization,X-Tenant-ID,X-Correlation-ID"
  
  command: ["python", "-m", "app.worker"]

# Events service configuration
events:
  enabled: true
  image:
    repository: audit-service-events
    tag: latest
    pullPolicy: Never
  
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  
  ports:
    http: 8003
    metrics: 8004
  
  env:
    # Application Configuration
    ENVIRONMENT: "production"
    LOG_LEVEL: "INFO"
    API_V1_STR: "/api/v1"
    PROJECT_NAME: "Events Service"
    
    # Database Configuration
    EVENTS_DATABASE_URL: "postgresql+asyncpg://$(POSTGRES_USERNAME):$(POSTGRES_PASSWORD)@{{ include \"audit-service.fullname\" . }}-postgresql:5432/events_db"
    
    # Authentication Configuration
    EVENTS_API_KEY: "events-api-key-123"
    
    # Events Configuration
    EVENTS_MAX_EVENTS_PER_HOUR: "1000"
    EVENTS_RETENTION_DAYS: "30"
    EVENTS_BATCH_SIZE: "100"
    EVENTS_PROCESSING_TIMEOUT: "30"
    
    # Cloud Provider Configuration
    CLOUD_PROVIDER_TIMEOUT: "30"
    CLOUD_PROVIDER_RETRY_COUNT: "3"
    CLOUD_PROVIDER_RETRY_DELAY: "5"
    
    # Webhook Configuration
    WEBHOOK_TIMEOUT: "30"
    WEBHOOK_RETRY_COUNT: "3"
    WEBHOOK_RETRY_DELAY: "5"
    
    # Monitoring Configuration
    METRICS_ENABLED: "true"
    METRICS_PORT: "8003"
    HEALTH_CHECK_INTERVAL: "30"
    
    # CORS Configuration
    CORS_ORIGINS: "https://backstage.example.com,https://audit.example.com"
    CORS_CREDENTIALS: "true"
    CORS_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
    CORS_HEADERS: "Content-Type,Authorization,X-Tenant-ID,X-Correlation-ID"

# Service configuration
service:
  backend:
    enabled: true
    type: ClusterIP
    port: 8000
    targetPort: 8000
    annotations: {}
  
  frontend:
    enabled: true
    type: ClusterIP
    port: 80
    targetPort: 80
    annotations: {}
  
  alerting:
    enabled: true
    type: ClusterIP
    port: 8001
    targetPort: 8001
    annotations: {}
  
  events:
    enabled: true
    type: ClusterIP
    port: 8003
    targetPort: 8003
    annotations: {}

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  
  hosts:
    - host: audit.example.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: audit-service-frontend
            port: 80
        - path: /api
          pathType: Prefix
          service:
            name: audit-service-backend
            port: 8000
        - path: /alerts
          pathType: Prefix
          service:
            name: audit-service-alerting
            port: 8001
        - path: /events
          pathType: Prefix
          service:
            name: audit-service-events
            port: 8003
  
  tls:
    - secretName: audit-service-tls
      hosts:
        - audit.example.com

# Horizontal Pod Autoscaler configuration
hpa:
  backend:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  frontend:
    enabled: true
    minReplicas: 2
    maxReplicas: 8
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  alerting:
    enabled: true
    minReplicas: 2
    maxReplicas: 6
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  events:
    enabled: true
    minReplicas: 2
    maxReplicas: 6
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

# ServiceAccount configuration
serviceAccount:
  create: true
  name: audit-service
  annotations: {}
  labels:
    app.kubernetes.io/name: audit-service
    app.kubernetes.io/component: serviceaccount

# RBAC configuration
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "events", "configmaps", "secrets"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: ["apps"]
      resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: ["networking.k8s.io"]
      resources: ["ingresses"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: ["autoscaling"]
      resources: ["horizontalpodautoscalers"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
    port: metrics
  
  prometheusRule:
    enabled: true
    groups:
      - name: audit-service.rules
        rules:
          - alert: AuditServiceHighErrorRate
            expr: rate(audit_service_errors_total[5m]) > 0.1
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "High error rate detected in audit service"
              description: "Error rate is {{ $value }} errors per second"

# Security configuration
security:
  podSecurityContext:
    fsGroup: 1000
    runAsNonRoot: true
    runAsUser: 1000
  
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    capabilities:
      drop:
        - ALL

# Affinity and anti-affinity
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - audit-service
          topologyKey: kubernetes.io/hostname

# Tolerations
tolerations: []

# Node selector
nodeSelector: {}

# Annotations
annotations: {}

# Labels
labels:
  app.kubernetes.io/name: audit-service
  app.kubernetes.io/instance: "{{ .Release.Name }}"
  app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
  app.kubernetes.io/managed-by: "{{ .Release.Service }}"

# Secrets configuration
# These should be provided via external secret management or CI/CD
secrets:
  # JWT and API secrets
  jwtSecretKey: "{{ .Values.secrets.jwtSecretKey | default (printf \"jwt-secret-%s\" (randAlphaNum 32)) }}"
  googleCredentials: "{{ .Values.secrets.googleCredentials | default '{}' }}"
  apiKeySecret: "{{ .Values.secrets.apiKeySecret | default (printf \"api-key-%s\" (randAlphaNum 32)) }}"
  encryptionKey: "{{ .Values.secrets.encryptionKey | default (printf \"encryption-key-%s\" (randAlphaNum 32)) }}"
  
  # PostgreSQL credentials (should be provided via external secrets)
  postgresql:
    secretName: "{{ .Values.database.credentials.secretName }}"
    postgresPassword: "{{ .Values.secrets.postgresql.postgresPassword | default (printf \"postgres-password-%s\" (randAlphaNum 16)) }}"
    auditUserPassword: "{{ .Values.secrets.postgresql.auditUserPassword | default (printf \"audit-password-%s\" (randAlphaNum 16)) }}"
    readonlyUserPassword: "{{ .Values.secrets.postgresql.readonlyUserPassword | default (printf \"readonly-password-%s\" (randAlphaNum 16)) }}"
