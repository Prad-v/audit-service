name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - e2e
        - manual
      continue_on_fail:
        description: 'Continue running tests even if some fail'
        required: false
        default: false
        type: boolean

jobs:
  analyze-changes:
    name: Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      change-summary: ${{ steps.changes.outputs.summary }}
      files-changed: ${{ steps.changes.outputs.files }}
      change-types: ${{ steps.changes.outputs.types }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for change analysis
    
    - name: Analyze changes
      id: changes
      run: |
        # Get the previous commit for comparison
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, compare with the base branch
          PREV_COMMIT="${{ github.event.pull_request.base.sha }}"
        else
          # For pushes, get the previous commit
          PREV_COMMIT=$(git rev-parse HEAD~1 2>/dev/null || echo "")
        fi
        
        if [ -n "$PREV_COMMIT" ]; then
          # Get changed files
          CHANGED_FILES=$(git diff --name-only $PREV_COMMIT HEAD | tr '\n' ',' | sed 's/,$//')
          
          # Analyze change types
          BACKEND_CHANGES=$(git diff --name-only $PREV_COMMIT HEAD | grep -E '^(backend/|\.py$)' | wc -l)
          FRONTEND_CHANGES=$(git diff --name-only $PREV_COMMIT HEAD | grep -E '^(frontend/|\.(tsx?|jsx?|css|html)$)' | wc -l)
          INFRA_CHANGES=$(git diff --name-only $PREV_COMMIT HEAD | grep -E '^(docker-compose|Dockerfile|k8s/|terraform/|\.github/)' | wc -l)
          DOC_CHANGES=$(git diff --name-only $PREV_COMMIT HEAD | grep -E '\.(md|txt|rst)$' | wc -l)
          TEST_CHANGES=$(git diff --name-only $PREV_COMMIT HEAD | grep -E '^(tests/|test_)' | wc -l)
          
          # Create change types summary
          CHANGE_TYPES=""
          [ $BACKEND_CHANGES -gt 0 ] && CHANGE_TYPES="${CHANGE_TYPES}backend,"
          [ $FRONTEND_CHANGES -gt 0 ] && CHANGE_TYPES="${CHANGE_TYPES}frontend,"
          [ $INFRA_CHANGES -gt 0 ] && CHANGE_TYPES="${CHANGE_TYPES}infrastructure,"
          [ $DOC_CHANGES -gt 0 ] && CHANGE_TYPES="${CHANGE_TYPES}documentation,"
          [ $TEST_CHANGES -gt 0 ] && CHANGE_TYPES="${CHANGE_TYPES}tests,"
          CHANGE_TYPES=$(echo $CHANGE_TYPES | sed 's/,$//')
          
          # Create detailed summary
          SUMMARY="## üìä Change Analysis\n\n"
          SUMMARY="${SUMMARY}**Repository:** ${{ github.repository }}\n"
          SUMMARY="${SUMMARY}**Branch:** ${{ github.ref_name }}\n"
          SUMMARY="${SUMMARY}**Commit:** ${{ github.sha }}\n"
          SUMMARY="${SUMMARY}**Author:** ${{ github.actor }}\n"
          SUMMARY="${SUMMARY}**Event:** ${{ github.event_name }}\n\n"
          
          SUMMARY="${SUMMARY}### üìà Change Statistics\n\n"
          SUMMARY="${SUMMARY}- **Backend Changes:** $BACKEND_CHANGES files\n"
          SUMMARY="${SUMMARY}- **Frontend Changes:** $FRONTEND_CHANGES files\n"
          SUMMARY="${SUMMARY}- **Infrastructure Changes:** $INFRA_CHANGES files\n"
          SUMMARY="${SUMMARY}- **Documentation Changes:** $DOC_CHANGES files\n"
          SUMMARY="${SUMMARY}- **Test Changes:** $TEST_CHANGES files\n\n"
          
          SUMMARY="${SUMMARY}### üîÑ Change Types\n\n"
          SUMMARY="${SUMMARY}**Areas Modified:** $CHANGE_TYPES\n\n"
          
          SUMMARY="${SUMMARY}### üìù Recent Commits\n\n"
          SUMMARY="${SUMMARY}\`\`\`\n"
          SUMMARY="${SUMMARY}$(git log --oneline $PREV_COMMIT..HEAD | head -5)\n"
          SUMMARY="${SUMMARY}\`\`\`\n\n"
          
          SUMMARY="${SUMMARY}### üìÅ Changed Files\n\n"
          SUMMARY="${SUMMARY}\`\`\`\n"
          SUMMARY="${SUMMARY}$(git diff --name-only $PREV_COMMIT HEAD | head -20)\n"
          if [ $(git diff --name-only $PREV_COMMIT HEAD | wc -l) -gt 20 ]; then
            SUMMARY="${SUMMARY}... and $(($(git diff --name-only $PREV_COMMIT HEAD | wc -l) - 20)) more files\n"
          fi
          SUMMARY="${SUMMARY}\`\`\`\n"
          
        else
          # First commit or no previous commit
          SUMMARY="## üìä Change Analysis\n\n"
          SUMMARY="${SUMMARY}**Repository:** ${{ github.repository }}\n"
          SUMMARY="${SUMMARY}**Branch:** ${{ github.ref_name }}\n"
          SUMMARY="${SUMMARY}**Commit:** ${{ github.sha }}\n"
          SUMMARY="${SUMMARY}**Author:** ${{ github.actor }}\n"
          SUMMARY="${SUMMARY}**Event:** ${{ github.event_name }}\n\n"
          SUMMARY="${SUMMARY}### üéâ Initial Commit\n\n"
          SUMMARY="${SUMMARY}This appears to be the initial commit or first push to this branch.\n\n"
          
          CHANGED_FILES="initial"
          CHANGE_TYPES="initial"
        fi
        
        # Set outputs
        echo "summary<<EOF" >> $GITHUB_OUTPUT
        echo "$SUMMARY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "types=$CHANGE_TYPES" >> $GITHUB_OUTPUT
        
        # Print summary to logs
        echo "$SUMMARY"
    
    - name: Create change summary
      run: |
        echo "${{ steps.changes.outputs.summary }}" >> $GITHUB_STEP_SUMMARY

  test:
    runs-on: ubuntu-latest
    needs: analyze-changes
    
    strategy:
      matrix:
        python-version: [3.11]
        node-version: [18]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: audit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      nats:
        image: nats:2-alpine
        options: >-
          --health-cmd "nats-server --help"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 4222:4222
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r backend/requirements-dev.txt
        pip install colorama requests
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Start services with Docker Compose
      run: |
        # Start services in background
        docker-compose up -d postgres redis nats
        
        # Wait for services to be ready
        echo "Waiting for services to be ready..."
        timeout 60 bash -c 'until docker-compose ps | grep -q "healthy"; do sleep 2; done'
        
        # Start API and Frontend services
        docker-compose up -d api frontend
        
        # Wait for API to be ready
        echo "Waiting for API to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:8000/health/ > /dev/null 2>&1; do sleep 5; done'
        
        # Wait for Frontend to be ready
        echo "Waiting for Frontend to be ready..."
        timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 5; done'
    
    - name: Run Unit Tests
      if: github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
      continue-on-error: ${{ github.event.inputs.continue_on_fail || false }}
      run: |
        python tests/run_test_suite.py --unit --ci --verbose
    
    - name: Run Integration Tests
      if: github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
      continue-on-error: ${{ github.event.inputs.continue_on_fail || false }}
      run: |
        python tests/run_test_suite.py --integration --ci --verbose
    
    - name: Run E2E Tests
      if: github.event.inputs.test_type == 'e2e' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
      continue-on-error: ${{ github.event.inputs.continue_on_fail || false }}
      run: |
        python tests/run_test_suite.py --e2e --ci --verbose
    
    - name: Run Manual Scripts
      if: github.event.inputs.test_type == 'manual' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
      continue-on-error: ${{ github.event.inputs.continue_on_fail || false }}
      run: |
        python tests/run_test_suite.py --manual --ci --verbose
    
    - name: Run All Tests (if no specific type selected)
      if: github.event.inputs.test_type == '' && github.event_name == 'push'
      continue-on-error: ${{ github.event.inputs.continue_on_fail || false }}
      run: |
        python tests/run_test_suite.py --all --ci --verbose
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          backend/.pytest_cache/
          frontend/coverage/
          test-results/
        retention-days: 7
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
        docker system prune -f

  test-summary:
    needs: [analyze-changes, test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: test-results/
    
    - name: Generate comprehensive test summary
      run: |
        echo "## üß™ Test Suite Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add change analysis
        echo "${{ needs.analyze-changes.outputs.change-summary }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add test status
        echo "### üß™ Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "‚úÖ **Overall Status:** All tests passed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Overall Status:** Some tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Unit Tests:** Backend Python tests with pytest" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Tests:** API integration tests" >> $GITHUB_STEP_SUMMARY
        echo "- **E2E Tests:** End-to-end frontend-backend tests" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Tests:** Security vulnerability scanning" >> $GITHUB_STEP_SUMMARY
        echo "- **Load Tests:** Performance testing with Locust" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üìÅ Test Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Test results and coverage reports are available as workflow artifacts." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "*This summary was automatically generated by the test workflow.*" >> $GITHUB_STEP_SUMMARY
