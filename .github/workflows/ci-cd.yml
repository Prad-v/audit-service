name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: gcr.io
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: audit-service
  REGION: us-central1

jobs:
  analyze-changes:
    name: Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      change-summary: ${{ steps.changes.outputs.summary }}
      files-changed: ${{ steps.changes.outputs.files }}
      change-types: ${{ steps.changes.outputs.types }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for change analysis
    
    - name: Analyze changes
      id: changes
      run: |
        # Get the previous commit for comparison
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, compare with the base branch
          PREV_COMMIT="${{ github.event.pull_request.base.sha }}"
        else
          # For pushes, get the previous commit
          PREV_COMMIT=$(git rev-parse HEAD~1 2>/dev/null || echo "")
        fi
        
        if [ -n "$PREV_COMMIT" ]; then
          # Get changed files
          CHANGED_FILES=$(git diff --name-only $PREV_COMMIT HEAD | tr '\n' ',' | sed 's/,$//')
          
          # Get commit messages
          COMMIT_MESSAGES=$(git log --oneline $PREV_COMMIT..HEAD | head -10 | tr '\n' '|' | sed 's/|$//')
          
          # Analyze change types
          BACKEND_CHANGES=$(git diff --name-only $PREV_COMMIT HEAD | grep -E '^(backend/|\.py$)' | wc -l)
          FRONTEND_CHANGES=$(git diff --name-only $PREV_COMMIT HEAD | grep -E '^(frontend/|\.(tsx?|jsx?|css|html)$)' | wc -l)
          INFRA_CHANGES=$(git diff --name-only $PREV_COMMIT HEAD | grep -E '^(docker-compose|Dockerfile|k8s/|terraform/|\.github/)' | wc -l)
          DOC_CHANGES=$(git diff --name-only $PREV_COMMIT HEAD | grep -E '\.(md|txt|rst)$' | wc -l)
          TEST_CHANGES=$(git diff --name-only $PREV_COMMIT HEAD | grep -E '^(tests/|test_)' | wc -l)
          
          # Create change types summary
          CHANGE_TYPES=""
          [ $BACKEND_CHANGES -gt 0 ] && CHANGE_TYPES="${CHANGE_TYPES}backend,"
          [ $FRONTEND_CHANGES -gt 0 ] && CHANGE_TYPES="${CHANGE_TYPES}frontend,"
          [ $INFRA_CHANGES -gt 0 ] && CHANGE_TYPES="${CHANGE_TYPES}infrastructure,"
          [ $DOC_CHANGES -gt 0 ] && CHANGE_TYPES="${CHANGE_TYPES}documentation,"
          [ $TEST_CHANGES -gt 0 ] && CHANGE_TYPES="${CHANGE_TYPES}tests,"
          CHANGE_TYPES=$(echo $CHANGE_TYPES | sed 's/,$//')
          
          # Create detailed summary
          SUMMARY="## üìä Change Analysis\n\n"
          SUMMARY="${SUMMARY}**Repository:** ${{ github.repository }}\n"
          SUMMARY="${SUMMARY}**Branch:** ${{ github.ref_name }}\n"
          SUMMARY="${SUMMARY}**Commit:** ${{ github.sha }}\n"
          SUMMARY="${SUMMARY}**Author:** ${{ github.actor }}\n"
          SUMMARY="${SUMMARY}**Event:** ${{ github.event_name }}\n\n"
          
          SUMMARY="${SUMMARY}### üìà Change Statistics\n\n"
          SUMMARY="${SUMMARY}- **Backend Changes:** $BACKEND_CHANGES files\n"
          SUMMARY="${SUMMARY}- **Frontend Changes:** $FRONTEND_CHANGES files\n"
          SUMMARY="${SUMMARY}- **Infrastructure Changes:** $INFRA_CHANGES files\n"
          SUMMARY="${SUMMARY}- **Documentation Changes:** $DOC_CHANGES files\n"
          SUMMARY="${SUMMARY}- **Test Changes:** $TEST_CHANGES files\n\n"
          
          SUMMARY="${SUMMARY}### üîÑ Change Types\n\n"
          SUMMARY="${SUMMARY}**Areas Modified:** $CHANGE_TYPES\n\n"
          
          SUMMARY="${SUMMARY}### üìù Recent Commits\n\n"
          SUMMARY="${SUMMARY}\`\`\`\n"
          SUMMARY="${SUMMARY}$(git log --oneline $PREV_COMMIT..HEAD | head -5)\n"
          SUMMARY="${SUMMARY}\`\`\`\n\n"
          
          SUMMARY="${SUMMARY}### üìÅ Changed Files\n\n"
          SUMMARY="${SUMMARY}\`\`\`\n"
          SUMMARY="${SUMMARY}$(git diff --name-only $PREV_COMMIT HEAD | head -20)\n"
          if [ $(git diff --name-only $PREV_COMMIT HEAD | wc -l) -gt 20 ]; then
            SUMMARY="${SUMMARY}... and $(($(git diff --name-only $PREV_COMMIT HEAD | wc -l) - 20)) more files\n"
          fi
          SUMMARY="${SUMMARY}\`\`\`\n"
          
        else
          # First commit or no previous commit
          SUMMARY="## üìä Change Analysis\n\n"
          SUMMARY="${SUMMARY}**Repository:** ${{ github.repository }}\n"
          SUMMARY="${SUMMARY}**Branch:** ${{ github.ref_name }}\n"
          SUMMARY="${SUMMARY}**Commit:** ${{ github.sha }}\n"
          SUMMARY="${SUMMARY}**Author:** ${{ github.actor }}\n"
          SUMMARY="${SUMMARY}**Event:** ${{ github.event_name }}\n\n"
          SUMMARY="${SUMMARY}### üéâ Initial Commit\n\n"
          SUMMARY="${SUMMARY}This appears to be the initial commit or first push to this branch.\n\n"
          
          CHANGED_FILES="initial"
          CHANGE_TYPES="initial"
        fi
        
        # Set outputs
        echo "summary<<EOF" >> $GITHUB_OUTPUT
        echo "$SUMMARY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "types=$CHANGE_TYPES" >> $GITHUB_OUTPUT
        
        # Print summary to logs
        echo "$SUMMARY"
    
    - name: Create change summary
      run: |
        echo "${{ steps.changes.outputs.summary }}" >> $GITHUB_STEP_SUMMARY

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: analyze-changes
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: audit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      nats:
        image: nats:2.9-alpine
        ports:
          - 4222:4222
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/audit_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "NATS_URL=nats://localhost:4222" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
    
    - name: Run database migrations
      run: |
        cd backend
        alembic upgrade head
    
    - name: Run linting
      run: |
        cd backend
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking
      run: |
        cd backend
        mypy app/ --ignore-missing-imports
    
    - name: Run unit tests
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Run integration tests
      run: |
        cd backend
        pytest tests/test_api_integration.py -v
    
    - name: Run security tests
      run: |
        cd tests/security
        python security_tests.py
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          backend/htmlcov/
          backend/coverage.xml
          backend/pytest-report.xml

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [analyze-changes, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r backend/app/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          trivy-results.sarif
          bandit-report.json

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [analyze-changes, test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  helm-package:
    name: Package and Publish Helm Chart
    runs-on: ubuntu-latest
    needs: [analyze-changes, build]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.0
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Generate Helm chart version
      id: chart-version
      run: |
        # Generate version based on commit and changes
        CHART_VERSION=$(python3 -c "
        import re
        import subprocess
        
        # Get commit count and hash
        commit_count = subprocess.check_output(['git', 'rev-list', '--count', 'HEAD']).decode().strip()
        commit_hash = subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']).decode().strip()
        
        # Get change types from previous job
        change_types = '${{ needs.analyze-changes.outputs.change-types }}'
        
        # Determine version bump based on change types
        if 'infrastructure' in change_types or 'backend' in change_types:
            version_bump = 'major'
        elif 'frontend' in change_types:
            version_bump = 'minor'
        else:
            version_bump = 'patch'
        
        # Generate semantic version
        if version_bump == 'major':
            version = f'1.{commit_count}.{commit_hash}'
        elif version_bump == 'minor':
            version = f'0.1.{commit_count}-{commit_hash}'
        else:
            version = f'0.0.{commit_count}-{commit_hash}'
        
        print(version)
        ")
        
        echo "chart_version=$CHART_VERSION" >> $GITHUB_OUTPUT
        echo "Generated chart version: $CHART_VERSION"
    
    - name: Update Chart.yaml version
      run: |
        cd helm/audit-service
        sed -i "s/version: .*/version: ${{ steps.chart-version.outputs.chart_version }}/" Chart.yaml
        sed -i "s/appVersion: .*/appVersion: \"${{ github.sha }}\"/" Chart.yaml
        echo "Updated Chart.yaml:"
        cat Chart.yaml
    
    - name: Package Helm chart
      run: |
        cd helm
        helm package audit-service/
        echo "Generated chart package:"
        ls -la *.tgz
    
    - name: Validate Helm chart
      run: |
        cd helm
        helm lint audit-service/
        helm template audit-service/ --values values/values-prod.yaml --namespace audit-service > /tmp/rendered.yaml
        echo "Chart validation completed"
    
    - name: Upload Helm chart artifact
      uses: actions/upload-artifact@v4
      with:
        name: helm-chart
        path: helm/*.tgz
        retention-days: 30
    
    - name: Publish to GitHub Packages (Helm Registry)
      if: github.event_name == 'release'
      run: |
        cd helm
        echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin
        helm push audit-service-*.tgz oci://ghcr.io/${{ github.repository_owner }}/charts
        echo "Published chart to GitHub Packages"
    
    - name: Publish to OCI Registry
      if: github.event_name == 'release'
      run: |
        cd helm
        echo ${{ secrets.GCP_SA_KEY }} | helm registry login gcr.io -u _json_key --password-stdin
        helm push audit-service-*.tgz oci://gcr.io/${{ env.PROJECT_ID }}/charts
        echo "Published chart to GCR OCI Registry"
    
    - name: Create Helm chart summary
      run: |
        echo "## üì¶ Helm Chart Package" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Chart Version:** ${{ steps.chart-version.outputs.chart_version }}" >> $GITHUB_STEP_SUMMARY
        echo "**App Version:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Change Types:** ${{ needs.analyze-changes.outputs.change-types }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìÅ Chart Contents" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Deployment" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend Deployment" >> $GITHUB_STEP_SUMMARY
        echo "- Worker Deployment" >> $GITHUB_STEP_SUMMARY
        echo "- Services (Backend, Frontend)" >> $GITHUB_STEP_SUMMARY
        echo "- Ingress Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- HPA (Horizontal Pod Autoscaler)" >> $GITHUB_STEP_SUMMARY
        echo "- RBAC (ServiceAccount, Role, RoleBinding)" >> $GITHUB_STEP_SUMMARY
        echo "- ConfigMaps and Secrets" >> $GITHUB_STEP_SUMMARY
        echo "- Resource Quotas and Limits" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Installation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "helm install audit-service ./helm/audit-service-*.tgz \\" >> $GITHUB_STEP_SUMMARY
        echo "  --namespace audit-service \\" >> $GITHUB_STEP_SUMMARY
        echo "  --create-namespace \\" >> $GITHUB_STEP_SUMMARY
                echo "  --set image.tag=${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [analyze-changes, build, helm-package]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Helm chart
      uses: actions/download-artifact@v4
      with:
        name: helm-chart
        path: helm/
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.0
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials audit-service-staging \
          --region ${{ env.REGION }} \
          --project ${{ env.PROJECT_ID }}
    
    - name: Deploy to staging with Helm
      run: |
        # Install or upgrade the Helm chart
        if helm list -n audit-service-staging | grep -q audit-service-staging; then
          echo "Upgrading existing deployment..."
          helm upgrade audit-service-staging ./helm/audit-service-*.tgz \
            --namespace audit-service-staging \
            --values values/values-staging.yaml \
            --set image.tag=${{ github.sha }} \
            --set backend.image.tag=${{ github.sha }} \
            --set frontend.image.tag=${{ github.sha }} \
            --set worker.image.tag=${{ github.sha }} \
            --wait --timeout=10m
        else
          echo "Installing new deployment..."
          helm install audit-service-staging ./helm/audit-service-*.tgz \
            --namespace audit-service-staging \
            --create-namespace \
            --values values/values-staging.yaml \
            --set image.tag=${{ github.sha }} \
            --set backend.image.tag=${{ github.sha }} \
            --set frontend.image.tag=${{ github.sha }} \
            --set worker.image.tag=${{ github.sha }} \
            --wait --timeout=10m
        fi
        
        # Wait for all deployments to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/audit-service-staging-backend -n audit-service-staging
        kubectl wait --for=condition=available --timeout=300s deployment/audit-service-staging-frontend -n audit-service-staging
        kubectl wait --for=condition=available --timeout=300s deployment/audit-service-staging-worker -n audit-service-staging
    
    - name: Run smoke tests
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Get service URL from ingress
        SERVICE_URL=$(kubectl get ingress -n audit-service-staging -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
        
        if [ -z "$SERVICE_URL" ]; then
          echo "Using hostname instead of IP"
          SERVICE_URL=$(kubectl get ingress -n audit-service-staging -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
        fi
        
        echo "Service URL: $SERVICE_URL"
        
        # Run basic health check
        curl -f http://$SERVICE_URL/health || exit 1
        
        # Run API smoke tests
        cd tests
        python smoke_tests.py --url http://$SERVICE_URL

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [analyze-changes, build, helm-package]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Helm chart
      uses: actions/download-artifact@v4
      with:
        name: helm-chart
        path: helm/
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.0
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials audit-service-prod \
          --region ${{ env.REGION }} \
          --project ${{ env.PROJECT_ID }}
    
    - name: Deploy infrastructure with Terraform
      run: |
        cd terraform
        terraform init
        terraform plan -var="environment=production" -var="image_tag=${{ github.sha }}"
        terraform apply -auto-approve -var="environment=production" -var="image_tag=${{ github.sha }}"
    
    - name: Deploy to production with Helm
      run: |
        # Install or upgrade the Helm chart
        if helm list -n audit-service | grep -q audit-service; then
          echo "Upgrading existing production deployment..."
          helm upgrade audit-service ./helm/audit-service-*.tgz \
            --namespace audit-service \
            --values values/values-prod.yaml \
            --set image.tag=${{ github.sha }} \
            --set backend.image.tag=${{ github.sha }} \
            --set frontend.image.tag=${{ github.sha }} \
            --set worker.image.tag=${{ github.sha }} \
            --wait --timeout=15m
        else
          echo "Installing new production deployment..."
          helm install audit-service ./helm/audit-service-*.tgz \
            --namespace audit-service \
            --create-namespace \
            --values values/values-prod.yaml \
            --set image.tag=${{ github.sha }} \
            --set backend.image.tag=${{ github.sha }} \
            --set frontend.image.tag=${{ github.sha }} \
            --set worker.image.tag=${{ github.sha }} \
            --wait --timeout=15m
        fi
        
        # Wait for all deployments to be ready
        kubectl wait --for=condition=available --timeout=600s deployment/audit-service-backend -n audit-service
        kubectl wait --for=condition=available --timeout=600s deployment/audit-service-frontend -n audit-service
        kubectl wait --for=condition=available --timeout=600s deployment/audit-service-worker -n audit-service
    
    - name: Run production health checks
      run: |
        # Wait for service to be ready
        sleep 60
        
        # Get service URL from ingress
        SERVICE_URL=$(kubectl get ingress -n audit-service -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
        
        if [ -z "$SERVICE_URL" ]; then
          echo "Using hostname instead of IP"
          SERVICE_URL=$(kubectl get ingress -n audit-service -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
        fi
        
        echo "Service URL: $SERVICE_URL"
        
        # Run comprehensive health checks
        curl -f https://$SERVICE_URL/health || exit 1
        curl -f https://$SERVICE_URL/health/ready || exit 1
        
        # Run production smoke tests
        cd tests
        python smoke_tests.py --url https://$SERVICE_URL --production
    
    - name: Create deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          üöÄ Production deployment completed!
          Version: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Environment: Production
          Changes: ${{ needs.analyze-changes.outputs.change-types }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [analyze-changes, deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install load testing tools
      run: |
        pip install locust
    
    - name: Get staging service URL
      run: |
        # Authenticate to GCP
        echo '${{ secrets.GCP_SA_KEY }}' | base64 -d > gcp-key.json
        gcloud auth activate-service-account --key-file gcp-key.json
        gcloud config set project ${{ env.PROJECT_ID }}
        
        # Get GKE credentials
        gcloud container clusters get-credentials audit-service-staging \
          --region ${{ env.REGION }}
        
        # Get service URL
        SERVICE_URL=$(kubectl get ingress audit-service-ingress -n audit-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "SERVICE_URL=http://$SERVICE_URL" >> $GITHUB_ENV
    
    - name: Run load tests
      run: |
        cd tests/load
        locust -f locustfile.py \
          --host ${{ env.SERVICE_URL }} \
          --users 50 \
          --spawn-rate 5 \
          --run-time 5m \
          --headless \
          --html load-test-report.html \
          --csv load-test-results
    
    - name: Upload load test results
      uses: actions/upload-artifact@v4
      with:
        name: load-test-results
        path: |
          tests/load/load-test-report.html
          tests/load/load-test-results_*.csv

  summary:
    name: Generate Summary
    runs-on: ubuntu-latest
    needs: [analyze-changes, test, security-scan, build, helm-package, deploy-staging, deploy-production, load-test]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate comprehensive summary
      run: |
        echo "## üéØ CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add change analysis
        echo "${{ needs.analyze-changes.outputs.change-summary }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add job status summary
        echo "### üîÑ Job Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "‚úÖ **Tests:** All tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Tests:** Some tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-scan.result }}" = "success" ]; then
          echo "‚úÖ **Security Scan:** Security checks passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Security Scan:** Security issues found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build.result }}" = "success" ]; then
          echo "‚úÖ **Build:** Images built and pushed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Build:** Build failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.helm-package.result }}" = "success" ]; then
          echo "‚úÖ **Helm Chart:** Chart packaged and published successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Helm Chart:** Chart packaging failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
          echo "‚úÖ **Staging Deployment:** Successfully deployed to staging" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy-staging.result }}" = "skipped" ]; then
          echo "‚è≠Ô∏è **Staging Deployment:** Skipped (not develop branch)" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Staging Deployment:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-production.result }}" = "success" ]; then
          echo "‚úÖ **Production Deployment:** Successfully deployed to production" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy-production.result }}" = "skipped" ]; then
          echo "‚è≠Ô∏è **Production Deployment:** Skipped (not release event)" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Production Deployment:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.load-test.result }}" = "success" ]; then
          echo "‚úÖ **Load Testing:** Load tests completed successfully" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.load-test.result }}" = "skipped" ]; then
          echo "‚è≠Ô∏è **Load Testing:** Skipped (not develop branch)" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Load Testing:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add overall status
        if [ "${{ job.status }}" = "success" ]; then
          echo "### üéâ Overall Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "*This summary was automatically generated by the CI/CD pipeline.*" >> $GITHUB_STEP_SUMMARY

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [summary]
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        # Authenticate to GCP
        echo '${{ secrets.GCP_SA_KEY }}' | base64 -d > gcp-key.json
        gcloud auth activate-service-account --key-file gcp-key.json
        gcloud config set project ${{ env.PROJECT_ID }}
        
        # Clean up old container images (keep last 10)
        gcloud container images list-tags ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }} \
          --limit=999999 --sort-by=TIMESTAMP \
          --format="get(digest)" | tail -n +11 | \
          xargs -I {} gcloud container images delete ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}@{} --quiet || true
    
    - name: Notify on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        text: |
          ‚ùå CI/CD Pipeline failed!
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Workflow: ${{ github.workflow }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}