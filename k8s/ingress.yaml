apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: audit-service-ingress
  namespace: audit-service
  labels:
    app.kubernetes.io/name: audit-service
    app.kubernetes.io/component: ingress
  annotations:
    # GKE Ingress annotations
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "audit-service-ip"
    networking.gke.io/managed-certificates: "audit-service-ssl-cert"
    kubernetes.io/ingress.allow-http: "false"
    
    # Security annotations
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://backstage.example.com,https://audit.example.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET,POST,PUT,DELETE,OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type,Authorization,X-Tenant-ID,X-Correlation-ID"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "5"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    
    # Buffer settings
    nginx.ingress.kubernetes.io/proxy-buffer-size: "4k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    
    # Custom headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'";
spec:
  tls:
  - hosts:
    - api.audit-service.example.com
    secretName: audit-service-tls
  rules:
  - host: api.audit-service.example.com
    http:
      paths:
      - path: /health
        pathType: Exact
        backend:
          service:
            name: audit-service-backend
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: audit-service-backend
            port:
              number: 80
      - path: /docs
        pathType: Prefix
        backend:
          service:
            name: audit-service-backend
            port:
              number: 80
      - path: /openapi.json
        pathType: Exact
        backend:
          service:
            name: audit-service-backend
            port:
              number: 80
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: audit-service-ssl-cert
  namespace: audit-service
  labels:
    app.kubernetes.io/name: audit-service
    app.kubernetes.io/component: certificate
spec:
  domains:
  - api.audit-service.example.com
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: audit-service-network-policy
  namespace: audit-service
  labels:
    app.kubernetes.io/name: audit-service
    app.kubernetes.io/component: network-policy
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: audit-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  # Allow ingress from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
  # Allow inter-pod communication within namespace
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: audit-service
    ports:
    - protocol: TCP
      port: 8000
  egress:
  # Allow egress to DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow egress to GCP APIs
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow egress to Redis
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow egress to external Redis (Cloud Memorystore)
  - to: []
    ports:
    - protocol: TCP
      port: 6379